"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});Creep.prototype.speak=function(...o){console.log(this.name,...o)};const m={},c=()=>{if(Game.time%100===0)for(const o in Memory.creeps)o in Game.creeps||delete Memory.creeps[o];for(const o in Game.creeps){const e=Game.creeps[o];if(!e.my)continue;const s=e.memory.room||e.room.name;m[s]=m[s]||[],m[s].push(e)}},k=o=>{var t,n;typeof o=="string"&&(o=Game.rooms[o]);const e=(t=m[o.name])!=null?t:[];let s=[],a="";if(e.length<3&&o.energyAvailable>=250&&(s=["work","carry","move","move"],a="basic-worker"),s.length){const l=o.find(FIND_MY_SPAWNS,{filter:r=>!r.spawning});if(l.length){const r=(n=l.pop())==null?void 0:n.spawnCreep(s,[o.name,Game.time,a].filter(Boolean).join(":"),{memory:{room:o.name,role:a}});r===OK?console.log("Spawned a screep!"):console.log("Failed to spawn a screep!",r)}}},y={fill:"transparent",opacity:.1,stroke:"#febf2b",strokeWidth:.2,lineStyle:"dashed"},f={reusePath:20,visualizePathStyle:y},i=(o,e)=>{var s;if(o.speak("Work Complete"),o.memory.task&&o.memory.task in o.room.memory.tasks){console.log(o.room.memory.tasks[o.memory.task],Object.keys(o.room.memory.tasks),o.memory.task);const a=(s=o.room.memory.tasks[o.memory.task])==null?void 0:s.indexOf(o.name);o.room.memory.tasks[o.memory.task][a]=null}o.memory.task=e},d=o=>{const e=Object.entries(o.room.memory.tasks).find(([a,t])=>t.indexOf(null)>=0);if(!e){o.speak("Bored");return}const s=e[1].indexOf(null);e[1][s]=o.name,o.memory.task=e[0]},u=(o,e)=>{const s=o.transfer(e,RESOURCE_ENERGY);switch(s){case ERR_NOT_IN_RANGE:o.moveTo(e,f);break;case OK:case ERR_NOT_ENOUGH_ENERGY:o.speak(`Depositing (${o.store.getUsedCapacity()} / ${o.store.getCapacity()})`),o.store.getUsedCapacity()===0&&i(o);break;default:o.speak("Unhandled deposit status",s)}},p=(o,e)=>{switch(o.harvest(e)){case ERR_NOT_IN_RANGE:o.moveTo(e,f);break;case OK:if(o.store.getFreeCapacity()===0){if(!o.room.controller)throw new Error("Creep is full in a room without a controller");const a=o.room.find(FIND_MY_SPAWNS,{filter:t=>t.store.getFreeCapacity(RESOURCE_ENERGY)>0});a.length?i(o,a[0].id):i(o,o.room.controller.id)}break}},g=()=>{var o;c();for(const e in Game.rooms){const s=Game.rooms[e];s.memory.tasks||(s.memory.tasks={}),k(s);const a=(o=m[e])!=null?o:[];for(const t of a)if(t.memory.task||d(t),t.memory.task){const n=Game.getObjectById(t.memory.task);n instanceof Source?(t.speak("Mining"),p(t,n)):n instanceof StructureStorage||n instanceof StructureController?(t.speak("Depositing"),u(t,n)):t.speak("Broken",n)}for(const t of s.find(FIND_SOURCES_ACTIVE))s.memory.tasks[t.id]||(s.memory.tasks[t.id]=[null,null,null])}};exports.loop=g;
//# sourceMappingURL=my-lib.js.map
