{"version":3,"file":"my-lib.js","sources":["../src/prototypes/Creep.ts","../src/globals.ts","../src/manageCreeps.ts","../src/constants.ts","../src/tasks/utils.ts","../src/tasks/deposit.task.ts","../src/tasks/source.task.ts","../src/index.ts"],"sourcesContent":["Creep.prototype.speak = function(this: Creep, ...args: Parameters<typeof console.log>) {\n    console.log(this.name, ...args)\n}","export const creeps: Record<Room[\"name\"], Creep[]> = {}","import { creeps } from \"./globals\";\n\nexport const manageCreeps = () => {\n  if (Game.time % 100 === 0) {\n    // Cleanup Memory\n    for (const name in Memory.creeps) {\n      if (!(name in Game.creeps)) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete Memory.creeps[name];\n      }\n    }\n  }\n\n  for (const name in Game.creeps) {\n    const creep = Game.creeps[name];\n    if (!creep.my) {\n      continue;\n    }\n    const room = creep.memory.room || creep.room.name;\n    creeps[room] = creeps[room] || [];\n    creeps[room].push(creep);\n  }\n};\n\nexport const spawn = (r: Room | Room[\"name\"]) => {\n  if (typeof r === \"string\") r = Game.rooms[r];\n\n  const roomCreeps = creeps[r.name] ?? [];\n  let body: BodyPartConstant[] = [];\n  let role: string = \"\";\n  if (roomCreeps.length < 3) {\n    // Short on hands, spawn some basic boys\n    if (r.energyAvailable >= 250) {\n      body = [\"work\", \"carry\", \"move\", \"move\"];\n      role = \"basic-worker\";\n    }\n  }\n\n  if (body.length) {\n    // find a spawn\n    const spawns = r.find(FIND_MY_SPAWNS, {\n      filter: (s) => !Boolean(s.spawning),\n    });\n    if (spawns.length) {\n      const spawnStatus = spawns\n        .pop()\n        ?.spawnCreep(\n          body,\n          [r.name, Game.time, role].filter(Boolean).join(\":\"),\n          {\n            memory: {\n              room: r.name,\n              role: role,\n            },\n          }\n        );\n        if (spawnStatus === OK) {\n          console.log(\"Spawned a screep!\")\n        } else {\n          console.log(\"Failed to spawn a screep!\", spawnStatus)\n        }\n    }\n  }\n};\n","\nexport const PATH_STYLE: PolyStyle = {\n    fill: \"transparent\",\n    opacity: 0.1,\n    stroke: \"#febf2b\",\n    strokeWidth: 0.2,\n    lineStyle: \"dashed\"\n}\n\n\nexport const DEFAULT_MOVE_OPTS: MoveToOpts = {\n    reusePath: 20,\n    visualizePathStyle: PATH_STYLE\n}","export const finishTask = (creep: Creep, nextId?: CreepMemory[\"task\"]) => {\n  creep.speak(\"Work Complete\");\n  if (creep.memory.task && creep.memory.task in creep.room.memory.tasks) {\n    console.log(\n      creep.room.memory.tasks[creep.memory.task],\n      Object.keys(creep.room.memory.tasks),\n      creep.memory.task\n    );\n    const creepTaskIdx = creep.room.memory.tasks[creep.memory.task]?.indexOf(\n      creep.name\n    );\n    creep.room.memory.tasks[creep.memory.task][creepTaskIdx] = null;\n    // TODO: When should the task be removed from the room\n  }\n\n  creep.memory.task = nextId;\n};\n\nexport const findTask = (creep: Creep) => {\n  // TODO: Future check that creep has correct body parts\n\n  \n  const task = Object.entries(creep.room.memory.tasks).reduce((a, [targetId, assignees]) => {\n    if (assignees.indexOf(null) === -1) return a;\n    const target = Game.getObjectById(targetId as TaskId)\n    if (!target) return a;\n    const pf = PathFinder.search(creep.pos, target.pos)  \n    if (pf.cost < a.distance) {\n        return { targetId, distance: pf.cost }\n    } else {\n        return a;\n    }\n  }, { targetId: null, distance: Number.MAX_SAFE_INTEGER })\n\n\n  if (!task.targetId) {\n    creep.speak(\"Bored\");\n    return;\n  }\n\n  // Replace first null with this creep\n  const idx = creep.room.memory.tasks[task.targetId].indexOf(null)\n  creep.room.memory.tasks[task.targetId][idx] = creep.name;\n  creep.memory.task = task.targetId as TaskId;\n};\n","import { DEFAULT_MOVE_OPTS } from \"../constants\";\nimport { finishTask } from \"./utils\";\n\nexport const depositTask = (creep: Creep, target: StructureStorage | StructureController) => {\n    \n    const r = creep.transfer(\n        target,\n        RESOURCE_ENERGY\n    )\n    switch (r) {\n        case ERR_NOT_IN_RANGE:\n            creep.moveTo(target, DEFAULT_MOVE_OPTS);\n            break;\n        case OK:\n        case ERR_NOT_ENOUGH_ENERGY:\n            creep.speak(`Depositing (${creep.store.getUsedCapacity()} / ${creep.store.getCapacity()})`)\n            if (creep.store.getUsedCapacity() === 0) {\n                // All done\n                finishTask(creep)\n            }\n            break;\n        default:\n            creep.speak(\"Unhandled deposit status\", r)\n    }\n}","import { DEFAULT_MOVE_OPTS } from \"../constants\";\nimport { finishTask } from \"./utils\";\n\nexport const sourceTask = (creep: Creep, target: Source) => {\n  const r = creep.harvest(target);\n  switch (r) {\n    case ERR_NOT_IN_RANGE:\n      const moveResult = creep.moveTo(target, DEFAULT_MOVE_OPTS);\n      if (moveResult !== OK) creep.moveTo(target, Object.assign({}, DEFAULT_MOVE_OPTS, {reusePath: 0}))\n      break;\n    case OK:\n      if (creep.store.getFreeCapacity() === 0) {\n        // Creep is full\n        if (!creep.room.controller)\n          throw new Error(\"Creep is full in a room without a controller\");\n\n        const spawns = creep.room.find(FIND_MY_SPAWNS, {\n          filter: (s) => s.store.getFreeCapacity(RESOURCE_ENERGY) > 0,\n        });\n        if (spawns.length) {\n          finishTask(creep, spawns[0].id);\n        } else {\n          finishTask(creep, creep.room.controller.id);\n        }\n      }\n      break;\n    default:\n      creep.speak(\"Unhandled mining case\", r);\n      break;\n  }\n};\n","import \"./prototypes/Creep\"\n\nimport { creeps } from \"./globals\";\nimport { manageCreeps, spawn } from \"./manageCreeps\";\nimport { depositTask } from \"./tasks/deposit.task\";\nimport { sourceTask } from \"./tasks/source.task\";\nimport { findTask } from \"./tasks/utils\";\nexport const loop = () => {\n  manageCreeps();\n  for (const roomName in Game.rooms) {\n    const room = Game.rooms[roomName];\n\n    if (!room.memory.tasks) room.memory.tasks = {};\n    // Do all room-specific logicing here\n    spawn(room);\n\n    const roomCreeps = creeps[roomName] ?? [];\n\n    for (const creep of roomCreeps) {\n      if (!creep.memory.task) findTask(creep);\n      if (creep.memory.task) {\n        const target = Game.getObjectById(creep.memory.task);\n        if (target instanceof Source) {\n          creep.speak(\"Mining\");\n          sourceTask(creep, target);\n        } else if (\n          target instanceof StructureStorage ||\n          target instanceof StructureController\n        ) {\n          creep.speak(\"Depositing\");\n          depositTask(creep, target);\n        } else {\n          creep.speak(\"Broken\", target);\n        }\n      }\n    }\n\n    for (const source of room.find(FIND_SOURCES_ACTIVE)) {\n      if (!room.memory.tasks[source.id]) {\n        room.memory.tasks[source.id] = [null, null, null]; // 3 per source\n      }\n    }\n  }\n};\n"],"names":["args","creeps","manageCreeps","name","creep","room","spawn","r","roomCreeps","_a","body","role","spawns","s","spawnStatus","_b","PATH_STYLE","DEFAULT_MOVE_OPTS","finishTask","nextId","creepTaskIdx","findTask","task","targetId","assignees","target","pf","idx","depositTask","sourceTask","loop","roomName","source"],"mappings":"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"}