{"version":3,"file":"my-lib.js","sources":["../src/globals.ts","../src/manageCreeps.ts","../src/constants.ts","../src/tasks/utils.ts","../src/tasks/controller.task.ts","../src/tasks/source.task.ts","../src/index.ts"],"sourcesContent":["export const creeps: Record<Room[\"name\"], Creep[]> = {}","import { creeps } from \"./globals\";\n\nexport const manageCreeps = () => {\n  if (Game.time % 100 === 0) {\n    // Cleanup Memory\n    for (const name in Memory.creeps) {\n      if (!(name in Game.creeps)) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete Memory.creeps[name];\n      }\n    }\n  }\n\n  for (const name in Game.creeps) {\n    const creep = Game.creeps[name];\n    if (!creep.my) {\n      continue;\n    }\n    const room = creep.memory.room || creep.room.name;\n    creeps[room] = creeps[room] || [];\n    creeps[room].push(creep);\n  }\n};\n\nexport const spawn = (r: Room | Room[\"name\"]) => {\n  if (typeof r === \"string\") r = Game.rooms[r];\n\n  const roomCreeps = creeps[r.name] ?? [];\n  let body: BodyPartConstant[] = [];\n  let role: string = \"\";\n  if (roomCreeps.length < 3) {\n    // Short on hands, spawn some basic boys\n    if (r.energyAvailable >= 250) {\n      body = [\"work\", \"carry\", \"move\", \"move\"];\n      role = \"basic-worker\";\n    }\n  }\n\n  if (body.length) {\n    // find a spawn\n    const spawns = r.find(FIND_MY_SPAWNS, {\n      filter: (s) => !Boolean(s.spawning),\n    });\n    if (spawns.length) {\n      const spawnStatus = spawns\n        .pop()\n        ?.spawnCreep(\n          body,\n          [r.name, Game.time, role].filter(Boolean).join(\":\"),\n          {\n            memory: {\n              room: r.name,\n              role: role,\n            },\n          }\n        );\n        if (spawnStatus === OK) {\n          console.log(\"Spawned a screep!\")\n        } else {\n          console.log(\"Failed to spawn a screep!\", spawnStatus)\n        }\n    }\n  }\n};\n","export const PATH_STYLE: PolyStyle = {\n    fill: \"transparent\",\n    opacity: 0.1,\n    stroke: \"#febf2b\",\n    strokeWidth: 0.2,\n    lineStyle: \"dashed\"\n}","export const finishTask = (creep: Creep, nextId?: CreepMemory[\"task\"]) => {\n  if (creep.memory.task) {\n    const creepTaskIdx = creep.room.memory.tasks[creep.memory.task].indexOf(\n      creep.name\n    );\n    creep.room.memory.tasks[creep.memory.task][creepTaskIdx] = null;\n    // TODO: When should the task be removed from the room\n  }\n\n  creep.memory.task = nextId;\n};\n\nexport const findTask = (creep: Creep) => {\n  // TODO: Future check that creep has correct body parts\n  const task = Object.entries(creep.room.memory.tasks).find(\n    ([k, v]) => v.indexOf(null) >= 0\n  );\n\n  console.log(task);\n\n  if (!task) {\n    console.log(`${creep.name} is bored`);\n    return;\n  }\n\n  // Replace first null with this creep\n  const idx = task[1].indexOf(null);\n  task[1][idx] = creep.name;\n  creep.memory.task = task[0] as TaskId;\n};\n","import { PATH_STYLE } from \"../constants\";\nimport { finishTask } from \"./utils\";\n\nexport const controllerTask = (creep: Creep, target: StructureController) => {\n    \n    const r = creep.transfer(\n        target,\n        RESOURCE_ENERGY\n    )\n    switch (r) {\n        case ERR_NOT_IN_RANGE:\n            creep.moveTo(target, { visualizePathStyle: PATH_STYLE });\n            break;\n        case OK:\n            if (creep.store.getUsedCapacity() === 0) {\n                // All done\n                finishTask(creep)\n            }\n            break;\n    }\n}","import { PATH_STYLE } from \"../constants\";\nimport { finishTask } from \"./utils\";\n\nexport const sourceTask = (creep: Creep, target: Source) => {\n  const r = creep.harvest(target);\n  switch (r) {\n    case ERR_NOT_IN_RANGE:\n      creep.moveTo(target, { visualizePathStyle: PATH_STYLE });\n      break;\n    case OK:\n      if (creep.store.getFreeCapacity() === 0) {\n        // Creep is full\n        if (!creep.room.controller)\n          throw new Error(\"Creep is full in a room without a controller\");\n        finishTask(creep, creep.room.controller.id)\n      }\n      break;\n  }\n};\n","import { creeps } from \"./globals\";\nimport { manageCreeps, spawn } from \"./manageCreeps\";\nimport { controllerTask } from \"./tasks/controller.task\";\nimport { sourceTask } from \"./tasks/source.task\";\nimport { findTask } from \"./tasks/utils\";\nexport const loop = () => {\n  manageCreeps();\n  for (const roomName in Game.rooms) {\n    const room = Game.rooms[roomName]\n\n    if (!room.memory.tasks) room.memory.tasks = {}\n    // Do all room-specific logicing here\n    spawn(room);\n    \n\n    const roomCreeps = creeps[roomName] ?? [];\n\n    for (const creep of roomCreeps) {\n      if (!creep.memory.task) findTask(creep)\n      if (creep.memory.task) {\n        const target = Game.getObjectById(creep.memory.task);\n        if (target instanceof Source) {\n          sourceTask(creep, target);\n        } else if (target instanceof StructureController) {\n          controllerTask(creep, target);\n        }\n      }\n    }\n\n    for (const source of room.find(FIND_SOURCES_ACTIVE)) {\n      if (!room.memory.tasks[source.id]) {\n        room.memory.tasks[source.id] = [null,null,null] // 3 per source\n      }\n      \n    }\n  }\n};\n"],"names":["creeps","manageCreeps","name","creep","room","spawn","r","roomCreeps","_a","body","role","spawns","s","spawnStatus","_b","PATH_STYLE","finishTask","nextId","creepTaskIdx","findTask","task","k","v","idx","controllerTask","target","sourceTask","loop","roomName","source"],"mappings":"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"}